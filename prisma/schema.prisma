// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  relationMode      = "prisma"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event?    @relation(fields: [eventId], references: [id])
  eventId       String?
  projects      Project[]
  likes         Like[]
  role          Role      @default(USER)
  Comment       Comment[]
  techs         Tech[]

  title    String?
  twitter  String?
  github   String?
  linkedin String?
  website  String?

  memberOfProjects Project[] @relation("ProjectMembers")
  memberOfEvents Event[] @relation("EventMembers")

  createdAt DateTime @default(now())

  @@index([eventId])
}

enum Role {
  ADMIN
  MOD
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  location    String
  description String @db.VarChar(1000)
  startTime   String

  image      String?
  isFeatured Boolean   @default(false)
  users      User[]
  projects   Project[]

  members User[] @relation("EventMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String
  link        String?
  image       String?
  eventId     String
  event       Event   @relation(fields: [eventId], references: [id])
  techs       Tech[]

  members User[] @relation("ProjectMembers")

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([authorId])
}

model Tech {
  id           String     @id @default(cuid())
  tech         MasterTech @relation(fields: [masterTechId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id])
  projectId    String?
  masterTechId String
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?

  @@index([masterTechId])
  @@index([projectId])
  @@index([userId])
}

model MasterTech {
  id     String @id @default(cuid())
  slug   String
  label  String
  imgUrl String
  Tech   Tech[]
}

model Like {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([projectId, userId])
  @@index([userId])
}

model Comment {
  id        String  @id @default(cuid())
  comment   String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([userId])
}
